{"version":3,"file":"bundle.cjs.js","sources":["../src/index.js"],"sourcesContent":["import _ from 'lodash';\nimport Promise from 'bluebird';\n\nfunction plainMsg(msg) {\n  return _.omit(msg, [\n    'cmd',\n    'action',\n    'role',\n    'transport$',\n    'id$',\n    'plugin$',\n    'fatal$',\n    'tx$',\n    'meta$',\n    'traceId',\n  ]);\n}\n\nfunction logRequest(type, level, msg) {\n  if (type === true) {\n    logger[level](msg.cmd);\n  }\n  else if (type === 'all') {\n    logger[level](msg);\n  }\n  else if (type === 'plain') {\n    logger[level](msg.cmd, plainMsg(msg));\n  }\n}\n\nfunction logResponse(start, type, level, msg, result) {\n  let ms = Date.now() - start;\n\n  if (result instanceof Errors.OperationalError) {\n    result.seneca = plainMsg(msg);\n    result.seneca.cmd = msg.cmd;\n    result.seneca.costMs = ms;\n    logger.warn(result);\n  }\n  else if (result instanceof Error) {\n    result.seneca = msg;\n    result.seneca.costMs = ms;\n    logger.error(result);\n  }\n  else if (type === true) {\n    logger[level](`done ${msg.cmd} -- ${ms}ms`);\n  }\n  else if (type === 'plain') {\n    logger[level](`done ${msg.cmd} -- ${ms}ms`, result);\n  }\n}\n\nexport function wrapAct() {\n  if (!this.seneca) {\n    throw new Error('no seneca found');\n  }\n\n  if (!global.Errors) {\n    throw new Error('no global Errors found');\n  }\n\n  let act = Promise.promisify(this.seneca.act, { context: this.seneca });\n\n  // expose global promise act\n  global.act = async function actAsync(msg, ...args) {\n    if (global.als) {\n      let traceId = global.als.get('traceId');\n      msg.traceId = msg.traceId === undefined ? traceId : msg.traceId;\n    }\n\n    let result = await act(msg, ...args);\n    if (result && result.errcode) {\n      if (!Errors[result.errcode]) {\n        throw new Error(`no error name found ${result.errcode} for ${result.errmsg}`);\n      }\n      throw new Errors[result.errcode](result.extra);\n    }\n    return result;\n  };\n}\n\nexport function wrapRoutes() {\n  if (!this.seneca) {\n    throw new Error('no seneca found');\n  }\n\n  this.seneca.plainMsg = plainMsg;\n\n  _.forEach(this.config.routes, (action, key) => {\n    let index = key.indexOf(' ');\n    let keyParts = [key.slice(0, index), key.slice(index + 1)];\n    let method = (keyParts[0] || '').toLowerCase();\n\n    if (!_.includes(['add', 'wrap'], method)) {\n      throw new Error(`invalid route method: ${method}`);\n    }\n\n    let actionParts = action.split('.');\n    let controllerName = actionParts[0];\n    let controller = this.controllers[controllerName];\n    if (!controller) {\n      throw new Error(`undefined controller: ${controllerName}`);\n    }\n\n    let actionMethodName = actionParts[1];\n    let actionMethod = controller[actionMethodName].bind(controller);\n    if (!actionMethod) {\n      throw new Error(`undefined action method: ${action}`);\n    }\n\n    let { requestLog, requestLogLevel = 'trace' } = this.config.seneca;\n    let { responseLog, responseLogLevel = 'trace' } = this.config.seneca;\n\n    controller[actionMethodName] = function actionAsync(msg, done) {\n      let { traceId } = msg;\n      if (traceId) {\n        if (global.als) {\n          global.als.set('traceId', traceId);\n        }\n      }\n\n      const start = Date.now();\n      logRequest(requestLog, requestLogLevel, msg);\n\n      return Promise.resolve()\n        .then(() => {\n          return actionMethod(msg);\n        })\n        .then((result) => {\n          logResponse(start, responseLog, responseLogLevel, msg, result);\n          return done(null, result);\n        })\n        .catch(Errors.OperationalError, (err) => {\n          logResponse(start, responseLog, responseLogLevel, msg, err);\n          done(null, err.response());\n        })\n        .catch((err) => {\n          logResponse(start, responseLog, responseLogLevel, msg, err);\n          done(null, new Errors.Unknown().response());\n        });\n    };\n  });\n}\n"],"names":["plainMsg","msg","_","omit","logRequest","type","level","cmd","logResponse","start","result","ms","Date","now","Errors","OperationalError","seneca","costMs","warn","Error","error","wrapAct","global","act","Promise","promisify","actAsync","args","als","traceId","get","undefined","errcode","errmsg","extra","wrapRoutes","forEach","config","routes","action","key","index","indexOf","keyParts","slice","method","toLowerCase","includes","actionParts","split","controllerName","controller","controllers","actionMethodName","actionMethod","bind","actionAsync","done","set","requestLog","requestLogLevel","resolve","then","responseLog","responseLogLevel","catch","err","response","Unknown"],"mappings":"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"}